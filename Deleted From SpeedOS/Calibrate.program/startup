SpeedOS.LoadAPI("SpeedAPI/peripheral")
SpeedOS.LoadAPI("SpeedAPI/windows") 

if not peripheral.find("monitor", true) then
  windows.clearScreen(colors.white)
  windows.error("You need monitor!")
  SpeedOS.Close()
end


if not term.isColor then error("This program requires advanced computer and advanced monitors to work.") end
 
local termXSize,termYSize = term.getSize() 
local countOfMonitors=0
local totalMonitorSizeX=0
local totalMonitorSizeY=0
local monitorsCountInWidth = 0
local monitorsCountInHeight = 0
local monitorsScale = 0
local monitors={}
local m={}
local fadeSleep = 0
 
local function text(x,y,text1)
        term.setCursorPos(x,y)
        term.write(text1)
end
 
local function centerText(text1,y)
        term.setBackgroundColor(colors.white)
        term.setTextColor(colors.lightGray)
        term.setCursorPos(math.ceil(termXSize/2-#text1/2),y)
        term.write(text1)
end
 
local function fade(sleep1)
        term.setBackgroundColor(colors.lightGray)
        term.clear()
        sleep(sleep1)
        term.setBackgroundColor(colors.gray)
        term.clear()
        sleep(sleep1)
        term.setBackgroundColor(colors.black)
        term.clear()
        sleep(sleep1)
        term.setBackgroundColor(colors.gray)
        term.clear()
        sleep(sleep1)
        term.setBackgroundColor(colors.lightGray)
        term.clear()
        sleep(sleep1)
end
 
local function findMonitors()
        local PeriList = peripheral.getNames()
        for i=1,#PeriList do
                if peripheral.getType(PeriList[i]) == "monitor" then
                        countOfMonitors = countOfMonitors + 1
                end
        end
end
 
local function drawScale(scale)
        local sizeOfScale = string.len(tostring(scale)) + 4
        local x=math.ceil(termXSize/2-sizeOfScale/2)
        local y=math.ceil(termYSize/2-2)
        for j=y,(y+2) do
                for i=x,(x+sizeOfScale-1) do
                        paintutils.drawPixel(i,j,colors.gray)
                end
        end
        term.setCursorPos(x+2,y+1)
        term.setTextColor(colors.white)
        term.write(tostring(scale))
end
 
local function drawSingleInputMon(x,y)
        for j=y,(y+1) do
                for i=x,(x+3) do
                        paintutils.drawPixel(i,j,colors.lightGray)
                end
        end
end
local function drawInputMonitors(x,y,counterX,counterY)
        for j=1,counterY do
                for i=1,counterX do
                        drawSingleInputMon(x+i*5-5,y+j*3-3)
                end
        end
end
 
term.setBackgroundColor(colors.gray)
term.clear()
sleep(fadeSleep)
term.setBackgroundColor(colors.lightGray)
term.clear()
sleep(fadeSleep)
term.setBackgroundColor(colors.white)
term.setTextColor(colors.gray)
term.clear()
 
centerText("Welcome to monitors cluster calibration program.",math.ceil(termYSize/2)-1)
centerText("Click anywhere to continue.",math.ceil(termYSize/2))
os.pullEvent("mouse_click")
fade(0)
term.setBackgroundColor(colors.white)
 
local counterX=1
local counterY=1
while true do
        term.setBackgroundColor(colors.white)
        term.clear()
        drawInputMonitors(2,2,counterX,counterY)
        centerText("Use mouse wheel to specify monitors in width.",math.ceil(termYSize/2+7))
        centerText("Left click to accept.",math.ceil(termYSize/2+8))
        event,side,x,y=os.pullEvent()
        if event == "mouse_scroll" then
                if side == 1 then
                        counterX=counterX-1
                        if counterX < 1 then counterX = 1 end
                else
                        counterX=counterX+1
                        if counterX > 9 then counterX = 9 end
                end
        elseif event == "mouse_click" then
                monitorsCountInWidth = counterX
                break
        end
end
fade(0)
term.setBackgroundColor(colors.white)
local counterY=1
while true do
        term.setBackgroundColor(colors.white)
        term.clear()
        drawInputMonitors(2,2,counterX,counterY)
        centerText("Use mouse wheel to specify monitors in height.",math.ceil(termYSize/2+7))
        centerText("Left click to accept.",math.ceil(termYSize/2+8))
        event,side,x,y=os.pullEvent()
        if event == "mouse_scroll" then
                if side == 1 then
                        counterY=counterY-1
                        if counterY < 1 then counterY = 1 end
                else
                        counterY=counterY+1
                        if counterY > 5 then counterY = 5 end
                end
        elseif event == "mouse_click" then
                monitorsCountInHeight = counterY
                break
        end
end
fade(0)
term.setBackgroundColor(colors.white)
term.clear()
local counterScale = 1.0
while true do
        term.setBackgroundColor(colors.white)
        term.clear()
        drawScale(counterScale)
        centerText("Use mouse wheel to set monitors scale.",math.ceil(termYSize/2+7))
        centerText("Left click to accept.",math.ceil(termYSize/2+8))
        event,side,x,y=os.pullEvent()
        if event == "mouse_scroll" then
                if side == 1 then
                        counterScale=counterScale-0.1
                        if counterScale < 0.5 then counterScale = 0.5 end
                else
                        counterScale=counterScale+0.1
                        if counterScale > 5 then counterScale = 5 end
                end
        elseif event == "mouse_click" then
                monitorsScale = counterScale
                break
        end
end
fade(0)
term.setBackgroundColor(colors.white)
 
while true do
        term.clear()
        monitors = {}
        findMonitors()
        if countOfMonitors == 0 then
                term.setCursorPos(1,2)
                print("No connected monitors were found. Connect monitors and click anywhere to try again.\n")
                os.pullEvent("mouse_click")
                countOfMonitors = 0
        elseif countOfMonitors < monitorsCountInWidth*monitorsCountInHeight then
                term.setCursorPos(1,2)
                print("Not enough monitors connected ("..countOfMonitors.."<"..monitorsCountInWidth*monitorsCountInHeight.."). You must connect only the number of monitors you specified earlier. Check all modems and click anywhere to try again.\n")
                os.pullEvent("mouse_click")
                countOfMonitors = 0
        elseif countOfMonitors > monitorsCountInWidth*monitorsCountInHeight then
                term.setCursorPos(1,2)
                print("Too much of monitors connected ("..countOfMonitors..">"..monitorsCountInWidth*monitorsCountInHeight.."). You must connect only the number of monitors you specified earlier. Click anywhere to try again.\n")
                os.pullEvent("mouse_click")
                countOfMonitors = 0
        elseif countOfMonitors == monitorsCountInWidth*monitorsCountInHeight then
                break
        end
end
 
local function drawSingleMon(x,y,isSelected)
        for j=y,(y+1) do
                for i=x,(x+3) do
                        if isSelected then
                                paintutils.drawPixel(i,j,colors.lightGray)
                        else
                                paintutils.drawPixel(i,j,colors.green)
                        end
                end
        end
end
 
local function drawMonitors(x,y,selectX,selectY)
        for j=1,monitorsCountInHeight do
                for i=1,monitorsCountInWidth do
                        if i==selectX and j==selectY then
                                drawSingleMon(x+i*5-5,y+j*3-3,false)
                        else
                                drawSingleMon(x+i*5-5,y+j*3-3,true)
 
                        end
                end
        end
end
 
for j=1,monitorsCountInHeight do
        m[j]={}
        monitors[j]={}
        for i=1,monitorsCountInWidth do
                term.setBackgroundColor(colors.white)
                term.clear()
                term.setCursorPos(1,2)
                drawMonitors(2,2,i,j)
                centerText("Let's setup monitors' position.",math.ceil(termYSize/2+7))
                centerText("Touch highlighted monitor.",math.ceil(termYSize/2+8))
                local event,side,x,y = os.pullEvent("monitor_touch")
                monitors[j][i]={}
                monitors[j][i]["id"]=side
                m[j][i]=peripheral.wrap(side)
                if not m[j][i].isColor then error("This program requires advanced monitors to work.") end
                m[j][i].setTextScale(monitorsScale)
                monitors[j][i]["xSize"],monitors[j][i]["ySize"] = m[j][i].getSize()
                m[j][i].setBackgroundColor(colors.white)
                m[j][i].clear()
                m[j][i].setTextColor(colors.lightGray)
                local textHeh = "Monitor "..side
                m[j][i].setCursorPos(math.ceil(monitors[j][i]["xSize"]/2-#textHeh/2),math.ceil(monitors[j][i]["ySize"]/2))
                m[j][i].write(textHeh)
        end
end
 
fade(0)
sleep(0.5)
 
for j=1,monitorsCountInHeight do
        for i=1,monitorsCountInWidth do
                m[j][i].setBackgroundColor(colors.black)
                m[j][i].clear()
        end
end
 
for i=1,monitorsCountInWidth do
        totalMonitorSizeX = totalMonitorSizeX + monitors[1][i]["xSize"]
end
 
for i=1,monitorsCountInHeight do
        totalMonitorSizeY = totalMonitorSizeY + monitors[i][1]["ySize"]
end
 
if monitorsCountInWidth > 1 then
        for j=1,monitorsCountInHeight do
                for i=1,monitorsCountInWidth do
                        monitors[j][i]["xStart"] = totalMonitorSizeX
                        monitors[j][i]["xEnd"] = totalMonitorSizeX
                        for a=(i+1),monitorsCountInWidth do
                                monitors[j][i]["xStart"] = monitors[j][i]["xStart"] - monitors[j][a]["xSize"]
                                monitors[j][i]["xEnd"] = monitors[j][i]["xEnd"] - monitors[j][a]["xSize"]
                        end
                        monitors[j][i]["xStart"] = monitors[j][i]["xStart"] - monitors[j][i]["xSize"] + 1
                end
        end
else
        for j=1,monitorsCountInHeight do
                monitors[j][1]["xStart"] = 1
                monitors[j][1]["xEnd"] = monitors[j][1]["xSize"]
        end
end
 
if monitorsCountInHeight > 1 then
        for j=1,monitorsCountInHeight do
                for i=1,monitorsCountInWidth do
                        monitors[j][i]["yStart"] = totalMonitorSizeY
                        monitors[j][i]["yEnd"] = totalMonitorSizeY
                        for a=(j+1),monitorsCountInHeight do
                                monitors[j][i]["yStart"] = monitors[j][i]["yStart"] - monitors[a][i]["ySize"]
                                monitors[j][i]["yEnd"] = monitors[j][i]["yEnd"] - monitors[a][i]["ySize"]
                        end
                        monitors[j][i]["yStart"] = monitors[j][i]["yStart"] - monitors[j][i]["ySize"] + 1
                end
        end
else
        for j=1,monitorsCountInHeight do
                monitors[j][1]["yStart"] = 1
                monitors[j][1]["yEnd"] = monitors[j][1]["ySize"]
        end
end
 
monitors["totalMonitorSizeX"]=totalMonitorSizeX
monitors["totalMonitorSizeY"]=totalMonitorSizeY
monitors["monitorsCountInWidth"]=monitorsCountInWidth
monitors["monitorsCountInHeight"]=monitorsCountInHeight
monitors["monitorsScale"]=monitorsScale
 
fs = SpeedOS.fs
file = fs.open("System/ClusterCalibration.settings","w")
file.write(textutils.serialize(monitors))
file.close()
 
term.setBackgroundColor(colors.white)
term.clear()
term.setCursorPos(1,2)
term.setTextColor(colors.gray)
print("Congratulations! All monitors have been calibrated. Now you can use config file located at System/ClusterCalibration.settings.\n\nTotal monitor size: "..totalMonitorSizeX.."x"..totalMonitorSizeY.." pixels. Click anywhere to quit.")
os.pullEvent("mouse_click")
 
SpeedOS.Close()
